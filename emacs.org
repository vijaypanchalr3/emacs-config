#+title: New configuration file
#+PROPERTY: header-args:emacs-lisp :tangle /home/vijay/.emacs :mkdirp yes
#+STARTUP: hideblocks

*Welcome to RisEmacs, my personal config files ,*

*documentation for org babel languages*: [[https://orgmode.org/worg/org-contrib/babel/languages/index.html]]
*Emacs from Scratch link*:
[[https://github.com/daviwil/emacs-from-scratch]]

*Emacs from Scratch Confguration*:
[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org]] 


* General settings 
** Encoding system
#+begin_src emacs-lisp


  ;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
  (setq utf-translate-cjk-mode nil)
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  ;; set the default encoding system
  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp buffer-file-coding-system)
      (setq buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

#+end_src
** Package system

This is code initializing melpa with updated elpa and org mode. which i copied from [[https://melpa.org/#/getting-started][melpa website]] and edited from *emacs from scratch* page.


#+begin_src emacs-lisp



  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq inhibit-startup-message t)



#+end_src
* Custom do-lists

#+begin_src emacs-lisp

  (dolist (mode '(org-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook
                  markdown-mode-hook
                  helpful-mode-hook
                  Custom-mode-hook
                  LaTeX-mode-hook
                  text-mode-hook
                  inferior-python-mode-hook
                  dired-mode-hook
                  neotree-mode-hook
                  image-mode-hook
                  help-mode-hook
                  Man-mode-hook
                  calc-mode-hook
                  Info-mode-hook
                  calc-trail-mode-hook))
    (add-hook mode(lambda () (display-line-numbers-mode 0))))
  (use-package hide-mode-line)
  (dolist (mode '(neotree-mode-hook
                  dashboard-mode-hook
                  image-mode-hook
                  vterm-mode-hook
                  magit-mode-hook
                  help-mode-hook
                  package-menu-mode-hook
                  calc-mode-hook
                  text-mode-hook
                  dired-mode-hook
                  calc-trail-mode-hook))
    (add-hook mode(lambda () (hide-mode-line-mode 1))))
  (dolist (mode '(org-mode-hook))
    (add-hook mode(lambda () (org-num-mode 1))))
  (setq-default line-spacing 4)
  

#+end_src
* Tangle automation
This block help me to tangle automatically everytime i save this file.d

 #+begin_src emacs-lisp


(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "/home/vijay/emacs-config/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

 #+end_src

 #+RESULTS: 
* Modeline

#+begin_src emacs-lisp

  (use-package all-the-icons)
      ;; (use-package doom-modeline
      ;;   :init (doom-modeline-mode 1)
      ;;   :config
      ;;   (setq doom-modeline-height 25)
      ;;   (setq doom-modeline-buffer-modification-icon t)
      ;;   (setq doom-modeline-hud nil)
      ;;   (setq doom-modeline-bar-width 20)
      ;;   (setq doom-modeline-modal-icon t)
      ;;   (setq doom-modeline-window-width-limit fill-column)
      ;;   (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
      ;;   (setq doom-modeline-buffer-modification-icon nil)
      ;;   (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)))
  ;; (use-package nano-theme
  ;;   :ensure nil
  ;;   :defer t
  ;;   :config
  ;;   (load-theme 'nano-light t))
  (use-package nano-modeline
      :init (nano-modeline-mode 1))
  (setq no-mode-line t)
#+end_src
* Set-trasperenct

#+begin_src emacs-lisp
  ;; set transparency
  ;; (set-frame-parameter (selected-frame) 'alpha '(98 98))
  ;; (add-to-list 'default-frame-alist '(alpha 98 98))
#+end_src
* Setting variables

#+begin_src emacs-lisp
  
  (custom-set-variables
   '(column-number-mode t)
   '(display-time-mode t)
   '(electric-pair-mode t)
   '(font-use-system-font nil)
   '(global-display-line-numbers-mode t)
   '(menu-bar-mode nil)
   '(org-fontify-done-headline nil)
   '(org-fontify-todo-headline nil)
   '(package-selected-packages
     '(mixed-pitch writeroom-mode company-box lsp-mode visual-fill-column org-bullets helpful doom-modeline doom-themes magit))
   '(scroll-bar-mode nil)
   '(show-paren-mode t)
   '(size-indication-mode t)
   '(window-divider-mode t)
   '(window-divider-default-places t)
   '(window-divider-default-bottom-width 1)
   '(tool-bar-mode nil)
   '(scroll-conservatively 100) 
   '(save-place-mode t))

  (set-face-attribute 'default nil :font "JetBrains Mono NL" :height 110)
  (setq ring-bell-function 'ignore)

#+end_src
* Better UX experience
** Ivy

#+begin_src emacs-lisp


(use-package ivy
  :diminish
  :bind (:map ivy-minibuffer-map
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
(use-package ivy-explorer
  :config
  (ivy-explorer-mode 1))

(use-package ivy-rich)
(ivy-rich-mode 1)


#+end_src
** Which-key

#+begin_src emacs-lisp


(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))


#+end_src
** Counsel

#+begin_src emacs-lisp


(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))
(use-package ivy-prescient
    :after counsel
    :config
    (ivy-prescient-mode 1))

#+end_src
** Helpful

#+begin_src emacs-lisp


(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))


#+end_src
** Rainbox indentation

#+begin_src emacs-lisp


(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))


#+end_src
** smooth scrolling
#+begin_src emacs-lisp
  (use-package smooth-scrolling)
  ;; (smooth-scrolling-mode 1)
  ;;(use-package sublimity)
    ;; (use-package sublimity-scroll)
    ;; (use-package sublimity-attractive)
    ;;
  ;;(sublimity-mode 1)
  ;; (setq sublimity-attractive-centering-width 150)
  ;; (setq sublimity-attractive-centering-width 110)

  ;; (setq sublimity-scroll-weight 10
  ;;    sublimity-scroll-drift-length 5)
  ;; (setq sublimity-scroll-vertical-frame-delay 0.01)
#+end_src
* Org-mode

Emacs Org mode is super Powerful and super customizable. this is small customization of emacs org mode.
*Org Mode Links* : [[https://orgmode.org/][Homepage]], [[https://orgmode.org/manual/][Manual]]

Basic customization for Org mode

** Org-basics
#+begin_src emacs-lisp

  (use-package org
    :config
    (setq org-ellipsis " "
          org-hide-emphasis-markers t)
    :bind
    ("<f12>" . org-cycle-list-bullet))
  (add-hook 'org-mode-hook 'org-overview)
  ;; (setq-default line-spacing 0)
  (provide 'emacs-orgmode-config)

  ;; (setq org-adapt-indentation nil)
  ;; (setq org-startup-truncated t)
  (setq global-page-break-line-mode t)
  ;; (setq header-line-format " ")
  (customize-set-variable 'org-blank-before-new-entry 
                          '((heading . nil)
                            (plain-list-item . nil)))
  (setq backup-directory-alist `(("." . "~/.saves")))

  ;; (setq make-backup-files nil)
  (setq org-startup-indented t
        org-pretty-entities t
        org-startup-with-inline-images t
        org-image-actual-width (list 550))
  (setq org-cycle-separator-lines 1)
  (setq org-log-done nil)
  (setq org-html-coding-system 'utf-8-unix)
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
  (setq org-html-table-default-attributes
        '(:border "0" :cellspacing "0" :cellpadding "6" :rules "none" :frame "none"))


#+end_src
** Org-bullets

#+begin_src emacs-lisp


  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
  (setq org-bullets-bullet-list '("  "))
  (setq org-indent-indentation-per-level 1)
  (setq org-adapt-indentation nil)
  (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) " "))))))
  ;; (dolist (face '((org-level-1 . 1.1)
  ;;                 (org-level-2 . 1.1)
  ;;                 (org-level-3 . 1.05)
  ;;                 (org-level-4 . 1.05)
  ;;                 (org-level-5 . 1.05)
  ;;                 (org-level-6 . 1.0)
  ;;                 (org-level-7 . 1.0)
  ;;                 (org-level-8 . 1.0)))
  ;;   (set-face-attribute (car face) nil :weight 'bold :height (cdr face)))


#+end_src
:custom
  (org-bullets-bullet-list '(" "" "" "" "" "" "" "))
** Margin setting for Org mode


#+begin_src emacs-lisp

    (defun new-info-mode-fun ()
      (setq visual-fill-column-center-text t
            visual-fill-column-width 90)
      (visual-fill-column-mode 1))
    (add-hook 'Info-mode-hook 'new-info-mode-fun)


    (defun efs/org-mode-visual-fill ()
      (setq visual-fill-column-width 150
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1)
      (visual-line-mode 1)
      (variable-pitch-mode 1))
      ;;(writeroom-mode 1)
      ;;(electric-pair-mode 0)
      ;;(org-indent-mode 1)

    (use-package visual-fill-column
      :hook '((org-mode . efs/org-mode-visual-fill)))
    (add-hook 'markdown-mode-hook 'efs/org-mode-visual-fill)
    (add-hook 'text-mode-hook 'efs/org-mode-visual-fill)
    (add-hook 'org-mode-hook 'org-indent-mode)
    ;; :hook '((text-mode . efs/org-mode-visual-fill))
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)


#+end_src
** Font setting for Org mode
 djk fk fkdjsfe abcdfghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ =Abcsfljfl= *dkfaj jkjkjkd* /fjkjskl/ /asdfhjhjhj/ 
#+begin_src emacs-lisp

  


#+end_src
** Emacs-Org-Babel language support

This is give way to use language in emacs org mode for execution.

 #+begin_src emacs-lisp



   (setq org-confirm-babel-evaluate nil)
   (setq org-babel-python-command "python3")
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))


 #+end_src
** LaTeX Preview inside org

Well, First you need *dvipng*  from package manager and also, *texlive-extra*. This will help to produce Latex png files.

Techniqly, i can use imagemagick and i always have that but i think that's too big for such task.

#+begin_src emacs-lisp


  (setq org-latex-create-formula-image-program 'dvipng)
  (plist-put org-format-latex-options :scale 2)


#+end_src
** Bullets-setting
This all functionality copy pasted from this site > [[https://thibautbenjamin.github.io/emacs/org-icons]]
I will make bullets iconful,
*** Removing todo keywords
#+begin_src emacs-lisp

  (setq org-todo-keywords
        '((sequence "IDEA(i)")
          (sequence "TODO(t)")
          (sequence "STARTED(s)")
          (sequence "NEXT(n)")
          (sequence "WAITING(w)")
          (sequence "DONE(d)")
          (sequence "CANCELED(c)")
          (sequence "SOMEDAY(f)")))
  ;;(sequence "|" "CANCELED(c)" "DELEGATED(l)" "SOMEDAY(f)")))
  (setq org-todo-keyword-faces
        '(("IDEA" . (:foreground "#F8BC5C" :weight bold))
          ("TODO" . (:foreground "#24448C" :weight bold))
          ("NEXT" . (:foreground "#74A466" :weight bold))
          ("STARTED" . (:foreground "#DC4424" :weight bold))
          ("WAITING" . (:foreground "#CCA4A0" :weight bold))
          ("CANCELED" . (:foreground "LimeGreen" :weight bold))
          ("DELEGATED" . (:foreground "LimeGreen" :weight bold))
          ("SOMEDAY" . (:foreground "LimeGreen" :weight bold))))
  (setq org-fast-tag-selection-single-key t)
  (setq org-use-fast-todo-selection t)
  (setq org-reverse-note-order t)

#+end_src
** Source block customization
#+begin_src emacs-lisp

  ;; (org-block-begin-line
  ;;  ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
  ;; (org-block-background
  ;;  ((t (:background "#FFFFEA"))))
  ;; (org-block-end-line
  ;;  ((nil )))


#+end_src
** Auto-capitalization

#+begin_src emacs-lisp
  (use-package captain)
  (add-hook
   'org-mode-hook
   (lambda ()
     (setq captain-predicate
           (lambda () (not (org-in-src-block-p))))
     (captain-mode 1)
     (abbrev-mode 1)
     (setq sentence-end-double-space nil)))
#+end_src
** Abbrev-mode


#+begin_src emacs-lisp
(setq abbrev-expand-function (lambda ()
                   (unless (org-in-src-block-p)
                 (abbrev--default-expand))))

#+end_src
* Markdown-mode
#+begin_src emacs-lisp


  ;; (add-hook 'markdown-mode-hook
  ;;           (lambda ()
  ;;             (markdown-toggle-markup-hiding 1)
  ;;             (captain-mode 1)
  ;;             (abbrev-mode 1)))

#+end_src
* Structural Templates

 #+begin_src emacs-lisp

   (with-eval-after-load 'org
     ;; This is needed as of Org 9.2
     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
     (add-to-list 'org-structure-template-alist '("cpp" . "src c++")))


#+end_src
* Org-Roam

This is my first configuration and use of famous org roam.
#+begin_src emacs-lisp


  (setq org-roam-directory (file-truename "~/org-roam"))
  (use-package org-roam
    :after org
    :config
    (org-roam-setup)
    :custom
    (org-roam-capture-templates
     '(("d" "default" plain
        "\n\n\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book notes" plain
        "\n*Author* : %^{Author} \n*Title* : ${title} \n\n\n\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: book")
        :unnarrowed t)))
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)		    
           (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))))
  (setq org-roam-completion-everywhere t)
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                      :if-new
                                      (file+head "${slug}.org"
                                                 "#+title: ${title}\n#+date: %u\n#+lastmod: \n\n")
                                      :immediate-finish t))
        time-stamp-start "#\\+lastmod: [\t]*")


#+end_src
* LSP
LSP mode is single hand funcyion for making emacs ide.
- [[https://emacs-lsp.github.io/lsp-mode/][Official website]]
- [[https://clangd.llvm.org/][c++ server clangd]]
- [[https://github.com/microsoft/pyright][github page for *pyright* a python server]]
- [[https://company-mode.github.io/][company-mode official site]]
- latex is still outside of functionality
** LSP- configuration
#+begin_src emacs-lisp


  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
  (add-hook 'lsp-configure-hook (lambda ()
                                  (lsp-headerline-breadcrumb-mode -1)))


#+end_src
** Language configuration
*** Python

#+begin_src emacs-lisp

  
  ;; (use-package python-mode
  ;;   :ensure nil
  ;;   :hook (python-mode . lsp-deferred))

  ;; (setq python-shell-interpreter "python3.9")
  ;; (setq python-shell-interpreter-args "-i")
  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :hook (python-mode . (lambda ()
  ;;                          (require 'lsp-pyright)
  ;;                          (lsp))))  ; or lsp-deferred


#+end_src
*** julia

#+begin_src emacs-lisp

  (use-package lsp-julia
    :ensure t
    :hook (julia-mode . (lambda () (lsp))))
  
#+end_src
*** C and C++
#+begin_src emacs-lisp

  ;; (add-hook 'c++-mode-hook 'lsp)
  ;; (add-hook 'c-mode-hook 'lsp)

#+end_src
*** Rust
#+begin_src emacs-lisp

  (setq lsp-rust-analyzer-server-command (list (substring (shell-command-to-string "rustup which rust-analyzer") 0 -1)))
  ;; (setq lsp-rust-analyzer-server-command (list (substring (shell-command-to-string "rustup which rls") 0 -1)))
  (use-package cargo)


  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'cargo-minor-mode)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))

#+end_src
** Company

#+begin_src emacs-lisp


  (use-package company
    :after lsp-mode
    :hook '((lsp-mode . company-mode)
            (prog-mode . company-mode)
            (fortran-mode . company-mode))
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
  (use-package company-box
    :hook (company-mode . company-box-mode))
  (setq company-box-icons-alist 'company-box-icons-all-the-icons
        company-box-icons-all-the-icons
        (let ((all-the-icons-scale-factor 1)
              (all-the-icons-default-adjust 0))
          `((Unknown       . ,(all-the-icons-faicon "question" :face 'all-the-icons-purple)) ;;question-circle is also good
            (Text          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-green))
            (Method        . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
            (Function      . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
            (Constructor   . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
            (Field         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Variable      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-dpurple))
            (Class         . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
            (Interface     . ,(all-the-icons-faicon "cogs" :face 'all-the-icons-red))
            (Module        . ,(all-the-icons-alltheicon "less" :face 'all-the-icons-red))
            (Property      . ,(all-the-icons-faicon "wrench" :face 'all-the-icons-red))
            (Unit          . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Value         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Enum          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-red))
            (Keyword       . ,(all-the-icons-material "format_align_center" :face 'all-the-icons-red :v-adjust -0.15))
            (Snippet       . ,(all-the-icons-material "content_paste" :face 'all-the-icons-red))
            (Color         . ,(all-the-icons-material "palette" :face 'all-the-icons-red))
            (File          . ,(all-the-icons-faicon "file" :face 'all-the-icons-red))
            (Reference     . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Folder        . ,(all-the-icons-faicon "folder" :face 'all-the-icons-red))
            (EnumMember    . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Constant      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (Struct        . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
            (Event         . ,(all-the-icons-faicon "bolt" :face 'all-the-icons-red))
            (Operator      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
            (TypeParameter . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
            (Template      . ,(all-the-icons-faicon "bookmark" :face 'all-the-icons-dgreen)))))


#+end_src
* Terminal

*vterm github page*:
[[https://github.com/akermu/emacs-libvterm]]

*Eshell Official page*:
[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html]]

I'm using vterm but i am just configuring Eshell

#+begin_src emacs-lisp


  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))
  (use-package eshell-git-prompt
    :after eshell)
  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'robbyrussell))
  (use-package vterm
    :ensure t)


#+end_src
* splash screen
#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
  (setq initial-scratch-message "")
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-startup-banner "~/.emacs.d/banner.png")
  (setq dashboard-center-content t)
  ;; To disable shortcut "jump" indicators for each section, set
  (setq dashboard-show-shortcuts t)
  (setq dashboard-items '((recents  . 10)
                          (bookmarks . 10)))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons nil)
  (setq dashboard-set-navigator t)
  ;;(dashboard-modify-heading-icons '((recents . "file-text")
  ;;                                  (bookmarks . "book")))
  (setq dashboard-set-footer nil)


#+end_src
* Latex mode
** Basic

#+begin_src emacs-lisp


  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'writeroom-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)


#+end_src
* MAN pages
#+begin_src emacs-lisp

  (add-hook 'Man-mode-hook
            (lambda ()
              (visual-fill-column-mode 1)
              (setq visual-fill-column-width 100)
              (setq visual-fill-column-center-text t)))

#+end_src
* Hacks from systemcrafters
This  is code i took from Systemcrafters =linkfdjk= ,
#+begin_src emacs-lisp
  

  ;;saving customization opetion in custom file other than main file.
  (setq custom-file (locate-user-emacs-file "custom-var.el"))
  (load custom-file 'noerror 'nomessage)

  ;;fff
#+end_src
* dimmer
#+begin_src emacs-lisp
  (use-package dimmer
    :init (dimmer-mode 1)
    :custom (dimmer-fraction 0.7))

  
  ;;(setq window-divider-default-bottom-width 4
  ;;      window-divider-default-right-width 4)
#+end_src
* some crux and also my custom functions
#+begin_src emacs-lisp

  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))


  ;; (defun duplicate-line ()
  ;;   (interactive)
  ;;   (kill-whole-line)
  ;;   (yank)
  ;;   (yank)
  ;;   (forward-line -1))


  (defun crux-get-positions-of-line-or-region ()
    "Return positions (beg . end) of the current line or region."
    (let (beg end)
      (if (and mark-active (> (point) (mark)))
          (exchange-point-and-mark))
      (setq beg (line-beginning-position))
      (if mark-active
          (exchange-point-and-mark))
      (setq end (line-end-position))
      (cons beg end)))
  (defun dark-theme-toggle ()
    (interactive)
    (nano-theme-toggle)
    )
      ;;;###autoload
  (defun crux-duplicate-current-line-or-region (arg)
    "Duplicates the current line or region ARG times.
      If there's no region, the current line will be duplicated.  However, if
      there's a region, all lines that region covers will be duplicated."
    (interactive "p")
    (pcase-let* ((origin (point))
                 (`(,beg . ,end) (crux-get-positions-of-line-or-region))
                 (region (buffer-substring-no-properties beg end)))
      (dotimes (_i arg)
        (goto-char end)
        (unless (use-region-p)
          (newline))
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg))))


  (defun crux-smart-open-line-above ()
    "Insert an empty line above the current line.
                Position the cursor at its beginning, according to the current mode."
    (interactive)
    (move-beginning-of-line nil)
    (insert "\n")
    (if electric-indent-inhibit
        ;; We can't use `indent-according-to-mode' in languages like Python,
        ;; as there are multiple possible indentations with different meanings.
        (let* ((indent-end (progn (crux-move-to-mode-line-start) (point)))
               (indent-start (progn (move-beginning-of-line nil) (point)))
               (indent-chars (buffer-substring indent-start indent-end)))
          (forward-line -1)
          ;; This new line should be indented with the same characters as
          ;; the current line.
          (insert indent-chars))
      ;; Just use the current major-mode's indent facility.
      (forward-line -1)
      (indent-according-to-mode)))

  (defun smart-enter()
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent)
    (indent-according-to-mode))


  (defun crux-kill-other-buffers ()
    "Kill all buffers but the current one.
              Doesn't mess with special buffers."
    (interactive)
    (when (y-or-n-p "Are you sure you want to kill all buffers but the current one? ")
      (seq-each
       #'kill-buffer
       (delete (current-buffer) (seq-filter #'buffer-file-name (buffer-list))))))


  (defun crux-insert-date ()
    "Insert a timestamp according to locale's date and time format."
    (interactive)
    (insert (format-time-string "%c" (current-time))))

  (defun crux-delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
            (delete-file filename delete-by-moving-to-trash)
            (message "Deleted file %s" filename)
            (kill-buffer))))))


  (defun crux-indent-defun ()
    "Indent the current defun."
    (interactive)
    (save-excursion
      (mark-defun)
      (indent-region (region-beginning) (region-end))))

 


#+end_src
* mark-ring
#+begin_src emacs-lisp
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 6)
  (defun xah-pop-local-mark-ring ()
    "Move cursor to last mark position of current buffer.
  Call this repeatedly will cycle all positions in `mark-ring'.
  URL `http://xahlee.info/emacs/emacs/emacs_jump_to_previous_position.html'
  Version 2016-04-04"
    (interactive)
    (set-mark-command t))

  (global-set-key (kbd "<f7>") 'pop-global-mark)
  (global-set-key (kbd "<f8>") 'xah-pop-local-mark-ring)
#+end_src
* Beauty and NANO-theme
#+begin_src emacs-lisp
  ;;
  (setq nano-modeline-prefix-padding t)
#+end_src
* Better Dired
** Dired-single

#+begin_src emacs-lisp
  (use-package dired-single)
  (defun my-dired-init ()
    "Bunch of stuff to run for dired, either immediately or when it's
       loaded."
    ;; <add other stuff here>
    (define-key dired-mode-map [remap dired-find-file]
      'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
      'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
      'dired-single-up-directory))

  ;; if dired's already loaded, then the keymap will be bound
  (if (boundp 'dired-mode-map)
      ;; we're good to go; just add our bindings
      (my-dired-init)
    ;; it's not loaded yet, so add our bindings to the load-hook
    (add-hook 'dired-load-hook 'my-dired-init))
#+end_src
** Dired-rainbow
#+begin_src emacs-lisp
  (with-eval-after-load 'dired  (use-package dired-filetype-face))
  (deffiletype-face "julia" "#369325")
  (deffiletype-face-regexp julia :extensions '("julia" "jl"))
  (deffiletype-setup "julia")
  (deffiletype-face "org" "#73A594")
  (deffiletype-face-regexp org :extensions '("org" "org"))
  (deffiletype-setup "org")
  (deffiletype-face "python" "#ECC448")
  (deffiletype-face-regexp python :extensions '("python" "py"))
  (deffiletype-setup "python")
  (deffiletype-face "cpp" "#32719A")
  (deffiletype-face-regexp cpp
    :extensions
    '("c"
      "cpp"
      "f90"
      "f95"))
  (deffiletype-setup "cpp")


#+end_src
** Hide dot files

#+begin_src emacs-lisp
  (with-eval-after-load 'dired  (use-package dired-hide-dotfiles))
  (defun my-dired-mode-hook ()
      "My `dired' mode hook."
      ;; To hide dot-files by default
      (dired-hide-dotfiles-mode))

    ;; To toggle hiding
    (define-key dired-mode-map "." #'dired-hide-dotfiles-mode)
    (add-hook 'dired-mode-hook #'my-dired-mode-hook)
#+end_src
* bookmark line

#+begin_src emacs-lisp

   (use-package bm
     :init
     (setq bm-restore-repository-on-load t)
     :config

     ;; Allow cross-buffer 'next'
     (setq bm-cycle-all-buffers t)

     ;; where to store persistant files
     (setq bm-repository-file "~/.emacs.d/bm-repository")

     ;; save bookmarks
     (setq-default bm-buffer-persistence t)

     ;; Loading the repository from file when on start up.
     (add-hook 'after-init-hook 'bm-repository-load)

     ;; Saving bookmarks
     (add-hook 'kill-buffer-hook #'bm-buffer-save)

     ;; Saving the repository to file when on exit.
     ;; kill-buffer-hook is not called when Emacs is killed, so we
     ;; must save all bookmarks first.
     (add-hook 'kill-emacs-hook #'(lambda nil
                                    (bm-buffer-save-all)
                                    (bm-repository-save)))



     ;; Restoring bookmarks
     (add-hook 'find-file-hooks   #'bm-buffer-restore)
     (add-hook 'after-revert-hook #'bm-buffer-restore)

     ;; Make sure bookmarks is saved before check-in (and revert-buffer)
     (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

                                           ;the two functions that make bm-bookmark worth it.
     (defun poseidon/bm-counsel-get-list (bookmark-overlays)
       "TODO: docstring.
    Arguments: BOOKMARK-OVERLAYS."
       (-map (lambda (bm)
               (with-current-buffer (overlay-buffer bm)
                 (let* ((line (replace-regexp-in-string
                               "\n$"
                               ""
                               (buffer-substring (overlay-start bm)
                                                 (overlay-end bm))))
                        ;; line numbers start on 1
                        (line-num (+ 1 (count-lines (point-min) (overlay-start bm))))
                        (name (format "%s:%d - %s" (buffer-name) line-num line)))
                   `(,name . ,bm))))
             bookmark-overlays))


     (defun poseidon/bm-counsel-find-bookmark ()
       "TODO: docstring.
    Arguments: none."
       (interactive)
       (let* ((bm-list (poseidon/bm-counsel-get-list (bm-overlays-lifo-order t)))
              (bm-hash-table (make-hash-table :test 'equal))
              (search-list (-map (lambda (bm) (car bm)) bm-list)))
         (-each bm-list (lambda (bm)
                          (puthash (car bm) (cdr bm) bm-hash-table)))
         (ivy-read "Find bookmark: "
                   search-list
                   :require-match t
                   :keymap counsel-describe-map
                   :action (lambda (chosen)
                             (let ((bookmark (gethash chosen bm-hash-table)))
                               (switch-to-buffer (overlay-buffer bookmark))
                               (bm-goto bookmark)))
                   :sort t)))

                                           ;(global-unset-key (kbd "<C-tab>"))
     (global-set-key (kbd "M-j") 'bm-toggle)
     (global-set-key (kbd "C-c j") 'poseidon/bm-counsel-find-bookmark)
     (global-set-key (kbd "C-c ,") 'bm-previous)
     (global-set-key (kbd "C-c .") 'bm-next)
     );end bm bookmarks
  
  
   ;; (use-package bm)
   ;; (setq bm-highlight-style 'bm-highlight-only-line)

   ;; (global-set-key (kbd "<C-f2>") 'bm-toggle)
   ;; (global-set-key (kbd "<f2>") 'bm-next)
   ;; (global-set-key (kbd "<S-f2>") 'bm-previous)

#+end_src
* Internet hacks
:PROPERTIES:
:ORDERED:  t
:END:

1. This hacks done by *stack exchange* by /Lei Zhao/.

      It will help to open pdf and other docs to default apps of OS.
  
   #+begin_src emacs-lisp
     (defun xdg-open (filename)
       (interactive "fFilename: ")
       (let ((process-connection-type))
         (start-process "" nil "xdg-open" (expand-file-name filename))))

     (defun find-file-auto (orig-fun &rest args)
       (let ((filename (car args)))
         (if (cl-find-if
              (lambda (regexp) (string-match regexp filename))
              '("\\.pdf\\'" "\\.docx?\\'"))
             (xdg-open filename)
           (apply orig-fun args))))

     (advice-add 'find-file :around 'find-file-auto)
     #+end_src

     I can make any thing via e-lisp.
     Suppose this can opoen files in default app

     I can use git like pro
2. Distraction-Free
   By ---
   #+begin_src emacs-lisp

     ;; Distraction-free screen
     (use-package olivetti
       :init
       (setq olivetti-body-width .67)
       :config
       (defun distraction-free ()
         "Distraction-free writing environment"
         (interactive)
         (if (equal olivetti-mode nil)
             (progn
               (window-configuration-to-register 1)
               (delete-other-windows)
               (text-scale-increase 0.7)
               (setq visual-fill-column-width 120)
               (olivetti-mode t)
               (hide-mode-line-mode t)
               (flyspell-mode t)
               (toggle-frame-fullscreen))
           (progn
             (jump-to-register 1)
             (setq visual-fill-column-width 150)
             (olivetti-mode 0)
             (toggle-frame-fullscreen)
             (text-scale-decrease 0.7))))
       :bind
       (("<f9>" . distraction-free)))


   #+end_src
* Key-bindings

#+begin_src emacs-lisp

  (use-package vterm-toggle)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; vterm keybinds  
  (global-set-key [f2] 'vterm-toggle)
  (global-set-key [C-f2] 'vterm-toggle-cd)
  ;; vterm bindings end
  (global-set-key [f6] 'calc)
  (global-set-key [f5] 'dashboard-refresh-buffer)
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
  (global-set-key (kbd "M-p") 'flyspell-correct-at-point)
  (global-set-key (kbd "C-)") 'display-line-numbers-mode)
  ;; (global-set-key (kbd "C-(") 'hide-mode-line-mode)
  ;; (global-unset-key (kbd "C-n"))
  ;; (global-unset-key (kbd "C-p"))
  ;; (global-unset-key (kbd "C-f"))
  ;; (global-unset-key (kbd "C-b"))
  ;; (global-unset-key (kbd "C-h"))
  ;; (global-unset-key (kbd "C-j"))
  ;; (global-unset-key (kbd "C-k"))
  ;; (global-unset-key (kbd "C-l"))
  ;; (global-set-key (kbd "C-n") 'electric-newline-and-maybe-indent)
  ;; (global-set-key (kbd "C-f") 'kill-line)
  ;; (global-set-key (kbd "C-h") 'backward-char)
  ;; (global-set-key (kbd "C-l") 'forward-char)
  ;; (global-set-key (kbd "C-j") 'next-line)
  ;; (global-set-key (kbd "C-k") 'previous-line)
  (global-set-key [(ctrl shift k)] 'crux-duplicate-current-line-or-region)
  (global-set-key [(ctrl =)] 'crux-smart-open-line-above)
  (global-set-key [(ctrl +)] 'smart-enter)
  (global-set-key [(meta shift up)]  'move-line-up)
  (global-set-key [(meta shift down)]  'move-line-down)
  (global-set-key (kbd "C-<tab>")  'crux-indent-defun)
  (global-set-key (kbd "C-x K") 'crux-kill-other-buffers)
  (global-set-key (kbd "M-P") 'flyspell-mode)

#+end_src
* Set faces
/Ff/
#+begin_src emacs-lisp
   (use-package mixed-pitch
     :hook
     ;; If you want it in all text modes:
     (text-mode . mixed-pitch-mode)
     :config
     (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono NL" :height 110)
     (set-face-attribute 'variable-pitch nil :font "Noto Serif" :height 140))
     ;;(set-face-attribute 'variable-pitch nil :font "Latin Modern Sans" :height 140))

   (custom-theme-set-faces
       'user
       '(window-divider ((t (:foreground "#ECEFF1"))))
       '(window-divider-last-pixel ((t (:foreground "#ECEFF1"))))
       '(window-divider-first-pixel ((t (:foreground "#ECEFF1"))))
       '(window-divider ((t (:foreground "#ECEFF1"))))
       '(bm-fringe-persistent-face ((t (:background "lemon chiffon" :foreground "black"))))
       '(bm-persistent-face ((t (:background "lemon chiffon" :foreground "black"))))
       '(nano-modeline-active-status-RO ((t (:inherit (nano-subtle nano-strong) :background "#D8E0E6" :foreground "white"))))
       '(org-block ((t (:inherit fixed-pitch))))
       '(org-code ((t (:inherit (shadow fixed-pitch)))))
       '(org-document-title ((t (:height 140 :weight bold))))
       '(org-tag ((t (:height 100))))
       '(dired-filetype-execute ((t (:foreground "red"))))
       '(dired-filetype-image ((t (:foreground "gray47"))))
       '(dired-filetype-plain ((t (:foreground "gold4"))))
       '(dired-filetype-source ((t (:foreground "chocolate"))))
       '(dired-filetype-video ((t (:foreground "gainsboro"))))
       '(dired-filetype-xml ((t (:foreground "dark cyan"))))
       '(italic ((t (:inherit nano-faded :slant italic))))
       '(ivy-org ((t (:inherit org-level-1))))
       '(org-level-1 ((t (:height 1.1 :foreground "#8b4513"))))
       '(org-level-2 ((t (:height 1.08 :foreground "#cd661d"))))
       '(org-level-3 ((t (:height 1.05 :foreground "#ee7621"))))
       '(org-level-4 ((t (:height 1.03 :foreground "#ff7f24"))))
       '(org-level-5 ((t (:foreground "#ff7f24"))))
       '(markdown-header-face-1 ((t (:height 1.1 :foreground "#8b4513"))))
       '(markdown-header-face-2 ((t (:height 1.08 :foreground "#cd661d"))))
       '(markdown-header-face-3 ((t (:height 1.05 :foreground "#ee7621"))))
       '(markdown-header-face-4 ((t (:height 1.03 :foreground "#ff7f24"))))
       '(markdown-header-face-5 ((t (:foreground "#ff7f24"))))
       '(org-special-keyword ((t (:height 100))))
       '(org-document-info ((t (:height 100))))
       '(org-document-info-keyword ((t (:height 100))))
       '(org-property-value ((t (:height 100))))
       '(org-meta-line ((t (:height 100))))
       '(org-verbatim ((t (:inherit fixed-pitch))))
       '(org-block-begin-line ((t (:height 100))))
       '(org-block-end-line ((t (:height 100))))
       '(org-drawer ((t (:height 100))))
       ;;'(org-date ((t (:inherit variable-pitch)))
       '(org-link ((t (:underline t)))))
#+end_src
* Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
